
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AL AS Assign Bag CDLL Comillas DLQ False GT HSOA HSSC LP LT Map None NumberComp RP SArrayList SLL Separator Set StringComp Tree True character digit print use Program : Declaration Declaration \n                | Declaration \n                | \n     Declaration : InputOptionalStruct LT Elements GT\n                    | InputRequiredStruct LT Elements GT\n                    | Structures Id Assign LT Elements GT\n     Elements : Bool\n                  | Int\n                  | Id\n                  | String\n                  | Elements Separator Elements\n                  |\n     Structures : DLQ \n                    | Map\n                    | AL\n                    | CDLL\n                    | AS\n                    | Set\n                    | Bag\n     InputRequiredStruct :  Tree  Id Assign LP StringComp RP \n                            |   Tree  Id Assign LP NumberComp RP \n                            |  SArrayList  Id Assign LP StringComp RP \n                            |  SArrayList  Id Assign LP NumberComp RP \n\n     InputOptionalStruct : HSOA Id Assign LP StringComp RP\n                            | HSOA Id Assign LP NumberComp RP\n                            | HSSC Id Assign LP StringComp RP\n                            | HSSC Id Assign LP NumberComp RP\n                            | HSSC Id Assign LP RP\n                            | HSOA Id Assign LP RP\n    \n    Id : character\n        | Id digit\n        | Id character\n    \n    Bool : True\n        | False\n\n    \n    Int : digit\n        | digit Int\n    \n    String : Comillas Elements Comillas           \n    '
    
_lr_action_items = {'$end':([0,1,2,17,43,47,66,],[-3,0,-2,-1,-4,-5,-6,]),'HSOA':([0,2,43,47,66,],[6,6,-4,-5,-6,]),'HSSC':([0,2,43,47,66,],[7,7,-4,-5,-6,]),'Tree':([0,2,43,47,66,],[8,8,-4,-5,-6,]),'SArrayList':([0,2,43,47,66,],[9,9,-4,-5,-6,]),'DLQ':([0,2,43,47,66,],[10,10,-4,-5,-6,]),'Map':([0,2,43,47,66,],[11,11,-4,-5,-6,]),'AL':([0,2,43,47,66,],[12,12,-4,-5,-6,]),'CDLL':([0,2,43,47,66,],[13,13,-4,-5,-6,]),'AS':([0,2,43,47,66,],[14,14,-4,-5,-6,]),'Set':([0,2,43,47,66,],[15,15,-4,-5,-6,]),'Bag':([0,2,43,47,66,],[16,16,-4,-5,-6,]),'LT':([3,4,36,57,60,67,68,69,70,71,72,73,74,],[18,19,48,-29,-28,-24,-25,-26,-27,-20,-21,-22,-23,]),'character':([5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,29,34,37,38,44,48,],[21,21,21,21,21,-13,-14,-15,-16,-17,-18,-19,21,21,38,-30,38,38,38,38,38,21,-31,-32,21,21,]),'GT':([18,19,21,26,27,28,29,30,31,32,33,35,37,38,44,45,48,53,54,55,],[-12,-12,-30,43,-7,-8,-9,-10,-33,-34,-35,47,-31,-32,-12,-36,-12,-11,-37,66,]),'Separator':([18,19,21,26,27,28,29,30,31,32,33,34,35,37,38,44,45,46,48,53,54,55,],[-12,-12,-30,44,-7,-8,-9,-10,-33,-34,-35,-12,44,-31,-32,-12,-36,44,-12,44,-37,44,]),'True':([18,19,34,44,48,],[31,31,31,31,31,]),'False':([18,19,34,44,48,],[32,32,32,32,32,]),'digit':([18,19,20,21,22,23,24,25,29,33,34,37,38,44,48,],[33,33,37,-30,37,37,37,37,37,33,33,-31,-32,33,33,]),'Comillas':([18,19,21,27,28,29,30,31,32,33,34,37,38,44,45,46,48,53,54,],[34,34,-30,-7,-8,-9,-10,-33,-34,-35,34,-31,-32,34,-36,54,34,-11,-37,]),'Assign':([20,21,22,23,24,25,37,38,],[36,-30,39,40,41,42,-31,-32,]),'LP':([39,40,41,42,],[49,50,51,52,]),'StringComp':([49,50,51,52,],[56,59,62,64,]),'NumberComp':([49,50,51,52,],[58,61,63,65,]),'RP':([49,50,56,58,59,61,62,63,64,65,],[57,60,67,68,69,70,71,72,73,74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'Declaration':([0,2,],[2,17,]),'InputOptionalStruct':([0,2,],[3,3,]),'InputRequiredStruct':([0,2,],[4,4,]),'Structures':([0,2,],[5,5,]),'Id':([5,6,7,8,9,18,19,34,44,48,],[20,22,23,24,25,29,29,29,29,29,]),'Elements':([18,19,34,44,48,],[26,35,46,53,55,]),'Bool':([18,19,34,44,48,],[27,27,27,27,27,]),'Int':([18,19,33,34,44,48,],[28,28,45,28,28,28,]),'String':([18,19,34,44,48,],[30,30,30,30,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> Declaration Declaration','Program',2,'p_Program','parser.py',45),
  ('Program -> Declaration','Program',1,'p_Program','parser.py',46),
  ('Program -> <empty>','Program',0,'p_Program','parser.py',47),
  ('Declaration -> InputOptionalStruct LT Elements GT','Declaration',4,'p_Declaration','parser.py',56),
  ('Declaration -> InputRequiredStruct LT Elements GT','Declaration',4,'p_Declaration','parser.py',57),
  ('Declaration -> Structures Id Assign LT Elements GT','Declaration',6,'p_Declaration','parser.py',58),
  ('Elements -> Bool','Elements',1,'p_Elements','parser.py',71),
  ('Elements -> Int','Elements',1,'p_Elements','parser.py',72),
  ('Elements -> Id','Elements',1,'p_Elements','parser.py',73),
  ('Elements -> String','Elements',1,'p_Elements','parser.py',74),
  ('Elements -> Elements Separator Elements','Elements',3,'p_Elements','parser.py',75),
  ('Elements -> <empty>','Elements',0,'p_Elements','parser.py',76),
  ('Structures -> DLQ','Structures',1,'p_Structures','parser.py',80),
  ('Structures -> Map','Structures',1,'p_Structures','parser.py',81),
  ('Structures -> AL','Structures',1,'p_Structures','parser.py',82),
  ('Structures -> CDLL','Structures',1,'p_Structures','parser.py',83),
  ('Structures -> AS','Structures',1,'p_Structures','parser.py',84),
  ('Structures -> Set','Structures',1,'p_Structures','parser.py',85),
  ('Structures -> Bag','Structures',1,'p_Structures','parser.py',86),
  ('InputRequiredStruct -> Tree Id Assign LP StringComp RP','InputRequiredStruct',6,'p_InputRequiredStruct','parser.py',102),
  ('InputRequiredStruct -> Tree Id Assign LP NumberComp RP','InputRequiredStruct',6,'p_InputRequiredStruct','parser.py',103),
  ('InputRequiredStruct -> SArrayList Id Assign LP StringComp RP','InputRequiredStruct',6,'p_InputRequiredStruct','parser.py',104),
  ('InputRequiredStruct -> SArrayList Id Assign LP NumberComp RP','InputRequiredStruct',6,'p_InputRequiredStruct','parser.py',105),
  ('InputOptionalStruct -> HSOA Id Assign LP StringComp RP','InputOptionalStruct',6,'p_InputOptionalStruct','parser.py',114),
  ('InputOptionalStruct -> HSOA Id Assign LP NumberComp RP','InputOptionalStruct',6,'p_InputOptionalStruct','parser.py',115),
  ('InputOptionalStruct -> HSSC Id Assign LP StringComp RP','InputOptionalStruct',6,'p_InputOptionalStruct','parser.py',116),
  ('InputOptionalStruct -> HSSC Id Assign LP NumberComp RP','InputOptionalStruct',6,'p_InputOptionalStruct','parser.py',117),
  ('InputOptionalStruct -> HSSC Id Assign LP RP','InputOptionalStruct',5,'p_InputOptionalStruct','parser.py',118),
  ('InputOptionalStruct -> HSOA Id Assign LP RP','InputOptionalStruct',5,'p_InputOptionalStruct','parser.py',119),
  ('Id -> character','Id',1,'p_Id','parser.py',134),
  ('Id -> Id digit','Id',2,'p_Id','parser.py',135),
  ('Id -> Id character','Id',2,'p_Id','parser.py',136),
  ('Bool -> True','Bool',1,'p_Bool','parser.py',141),
  ('Bool -> False','Bool',1,'p_Bool','parser.py',142),
  ('Int -> digit','Int',1,'p_Int','parser.py',147),
  ('Int -> digit Int','Int',2,'p_Int','parser.py',148),
  ('String -> Comillas Elements Comillas','String',3,'p_String','parser.py',153),
]
